# Import Libraries

import pandas as pd
from sklearn.model_selection import train_test_split
from sklearn.metrics import accuracy_score,confusion_matrix,classification_report
from sklearn.svm import SVC
from sklearn.neural_network import MLPClassifier

-------------------------------------------------------------------------------------------------------------------------------------------
# Upload & exploration of dataset

outreach_success = pd.read_excel('/Users/rugar/IMT599_Internship/Outreach_Campaign_Success.xlsx')

outreach_success.isnull().sum() # checking for NULL values
outreach_success.isna().sum() # checking for NA values
outreach_success.shape # (1653,10) - As expected
print(outreach_success.columns.values) # confirming column names

outreach_success # view dataset

-------------------------------------------------------------------------------------------------------------------------------------------
# Neural Networks for all demographics (Multi-Layer Perceptron model)

X = outreach_success.iloc[:,0:9]
y = outreach_success.iloc[:,9]

X_train, X_test, y_train, y_test = train_test_split(X, y, test_size = 0.3, random_state=42)

model = MLPClassifier(hidden_layer_sizes=5) # 5 hidden neurons in 1 hidden layer
model.fit(X_train,y_train)

predictions = model.predict(X_test)

print(accuracy_score(y_test,predictions))
print(confusion_matrix(y_test,predictions))
print(classification_report(y_test,predictions))

-------------------------------------------------------------------------------------------------------------------------------------------
# Neural Networks for all demographics (Multi-Layer Perceptron model)

X = outreach_success.iloc[:,0:9]
y = outreach_success.iloc[:,9]

X_train, X_test, y_train, y_test = train_test_split(X, y, test_size = 0.3, random_state=42)

model = MLPClassifier(hidden_layer_sizes=10) # 10 hidden neurons in 1 hidden layer
model.fit(X_train,y_train)

predictions = model.predict(X_test)

print(accuracy_score(y_test,predictions))
print(confusion_matrix(y_test,predictions))
print(classification_report(y_test,predictions))
